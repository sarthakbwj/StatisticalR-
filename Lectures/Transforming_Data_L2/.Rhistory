source("~/StatisticalR/Intro/Lecture_1.R", echo=TRUE)
file.create("tabulate.R")
getwd()
setwd("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1")
file.create("tabulate.R")
file.create("votes.csv")
ls
ls
rm(list = ls())
votes <- read.table("votes.csv")
View(votes)
View(votes)
votes <- read.table("votes.csv", sep = ",")
View(votes)
source("~/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/tabulate.R", echo=TRUE)
View(votes)
votes[1,1]
votes[,1]
votes[1,]
votes[,1]
votes$mail # access the column using the column name.
print(poll)
poll <- sum(votes$poll[1])
print(poll)
print(poll)
print(poll)
print(poll)
print(poll)
source("~/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/tabulate.R", echo=TRUE)
print(poll)
sum(votes$poll)
sum(votes$mail)
sum(votes$poll[1], votes$mail[1])
votes$poll + votes$mail
votes("Mario")
votes(Mario)
votes(1)
votes[1]
votes[1]
votes[,1]
votes[, 1]
votes[, 2]
sum(votes[, 2])
sum(votes[, 2], votes[, 3])
votes[, 3]
sum(votes[, 3])
sum(votes[, 2], votes[, 3])
votes[, 2] + votes[, 3]
sum(votes[, 3])
votes$poll + votes$mail
votes$poll + votes$mail
total <- votes$poll + votes$mail
write.csv(votes, "totals.csv")
votes$total <- votes$poll + votes$mail
write.csv(votes, "totals.csv")
write.csv(votes, "totals.csv", row.names = FALSE)
# call row and column name
row.names(votes)
# call row and column name
rownames(votes)
colnames(votes)
file.create()
voters â€¹-read.csv(url)
voters <-read.csv(url)
voters <- read.csv(url)
voters <- read.csv(url)
voters <- read.csv(url)
source("~/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/Representing_Data_L1.R", echo=TRUE)
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/voters.csv")
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Representing_Data_L1/voters.R")
voters <- read.csv(url)
View(voters)
nrow(voters)
ncol(voters)
unique(voters$voter_category)
unique(voters$Q22)
# convert vector to factors (name unique vectors)
factor(
voters$Q21,
labels = c("?","Yes","No","Unsure/Undecided")
)
# convert vector to factors
# (name unique vectors from numbers to lay language.)
factor(
voters$Q21,
labels = c("?","Yes","No","Unsure/Undecided"),
exclude = c("-1")
)
# convert vector to factors
# (name unique vectors from numbers to lay language.)
factor(
voters$Q21,
labels = c("Yes","No","Unsure/Undecided"),
exclude = c("-1")
)
getwd()
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2")
ls
file.remove("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2")
dir.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2")
setwd("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2")
getwd()
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_2")
setwd("Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/Transforming_Data_L2")
# Outliers are data points which fall outside of the Data range.
load("temps.RData")
load("~/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/temps.RData")
load("~/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/temps.RData")
load("~/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/temps.RData")
mean(temps)
temps
temps[2]
temps[4]
temps[7]
outliers
outliers <- c(temps[2], temps[4], temps[7])
outliers <- c(temps[2] + temps[4] + temps[7])
c(temps[2] + temps[4] + temps[7])
c(temps[2] , temps[4] , temps[7])
print(outliers)
outliers <- (temps[2] , temps[4] , temps[7])
print(outliers)
outliers <- c(temps[2] , temps[4] , temps[7])
c(temps[2] , temps[4] , temps[7])
temps[c(2,4,7)]
# creating a vector(list) of outliers - Transforming Vectors
temps[-c(2,4,7)]
temp[2]
source("~/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/Transforming_Data_L2.R", echo=TRUE)
temp[2]
temps[2]
temps[2]
temps[2] < 0;
temps[-c(2)]
temps
temps[-c(2,4)]
temps[-c(7)]
temps[-c(2,4)]
temps[-c(7)]
for indexes in temps:
temps < 0
which(temps < 0)
# outputs indexes which return TRUE as the result of the evaluating each expression. ---
which(temps < 0)
# outputs indexes which return TRUE as the result of the evaluating each expression.
which(temps < 0) and (temps > 40)
temps < 0 | temps > 60
which(temps < 0 | temps > 60)
any(temp < 0 | temp > 60)
any(temps < 0 | temps > 60)
any(temps < 0 | temps > 60)
# 'all' logical operator =
all(temps < 0 | temps > 60)
temps < 0
temps[filer]
temps[filter]
temps[filter]
filter <- temps < 0 | temps > 60
temps[filter]
# 'filter' stores the answers(T/F) to the evaluated elements which result to TRUE.
filter <- !(temps < 0 | temps > 60)
# passing 'filter' through 'temps' returns the values - a subset of outliers.
temps[filter]
sieve <- !(temps < 0 | temps > 60)
temps[sieve]
mean(temps)
# index into the data using position values
temps[2]
temps[4]
temps[7]
temps[c(2,4,7)]
# creating a vector(list) of outliers and removing them from
# the original vector - Transforming Vectors
temps[-c(2,4,7)]
temps[1] < 0
temps
temps[-c(2,4,7)]
temps
# 'Logical operators' allows the user to combine 2 or more expressing and ask complex questions.
# & - 'and'
# | - 'or'
temps = temps[-c(2,4,7)]
# 'Logical operators' allows the user to combine 2 or more expressing and ask complex questions.
# & - 'and'
# | - 'or'
temps == temps[-c(2,4,7)]
# 'Logical operators' allows the user to combine 2 or more expressing and ask complex questions.
# & - 'and'
# | - 'or'
temps <- temps[-c(2,4,7)]
temps
which(temps < 0 | temps > 60)
# outputs indexes which return TRUE as the result of the evaluating each expression.
which(temps < 0)
load("temps.RData") # load Data in IDE
mean(temps)
temps[7]
temps[c(2,4,7)]  # combine individual places of a vector in a new vector.
# creating a vector(list) of outliers and removing them from
# the original vector - Transforming Vectors
temps[-c(2,4,7)]
# Example of Logical Expression to ask questions and get output in TRUE or FALSE
temps[1] < 0
# outputs indexes which return TRUE as the result of the evaluating each expression.
which(temps < 0)
which(temps < 0 | temps > 60)
# 'any' logical operator = if any data point evaluated results to True, the output is TRUE and vice versa.
# are any of these values outliers?
any(temps < 0 | temps > 60)
# 'filter' vector stores the answers(T/F) to the evaluated elements which result to TRUE.
filter <- (temps < 0 | temps > 60)
# passing 'filter' through 'temps' returns the values - a subset of outliers.
temps[filter]
temps[sieve]
# passing 'filter' through 'temps' returns the values - a subset of outliers.
temps[filter]
# 'filter' vector stores the answers(T/F) to the evaluated elements which result to TRUE.
filter <- (temps < 0 | temps > 60)
# passing 'filter' through 'temps' returns the values - a subset of outliers.
temps[filter]
no_outliers <- temps[sieve]
no_outliers
save(no_outliers, file = "no_outliers.RData")
file.create("chicks.R")
file.create("chicks.csv")
read.csv('chicks.csv')
chicks <- read.csv("chicks.csv")
View(chicks)
summary((chicks))
summary((weight))
summary((chicks$weight))
mean(chicks$weight)
new_weight <- !(chicks$weight("NA"))
mean(chicks$weight, na.rm = FALSE)
mean(chicks$weight, na.rm = TRUE)
chicks[1]
chicks[1,2]
chicks[1,2,3]
chicks[1,2,8]
chicks[1,2,1]
chicks[1,5]
chicks[,5]
chicks[5,2]
chicks[c(5,7,9),2]
chicks[c(4,5,6),2]
chicks[c(4,5,6)]
chicks[c(4,5,6),]
casein_chicks <- chicks[c(1,2,3),]
mean(casein_chicks)
mean(casein_chicks$weight)
# mean of the  weight column of the newly created subset.
mean(casein_chicks$weight)
# na.rm helps remove the NA values from the selected column of the DataSet.
mean(chicks$weight, na.rm = TRUE)
casein_chicks <- chicks[1:3,]
# mean of the  weight column of the newly created subset.
mean(casein_chicks$weight)
is.na(chicks$weight)
which(is.na(chicks$weight))
chicks[!is.na(chicks$weight)]
chicks[!is.na(chicks$weight), ]
# subset of the DataSet without the NA values.
chicks <- chicks[!is.na(chicks$weight), ]
chicks
# another way of writing the above line
chicks <- subset(chick, is.na(weight))
# another way of writing the above line
chicks <- subset(chicks, is.na(weight))
# creating a subset of chicks who were feed linseed.
linseed_chicks <- subset(chicks, feed = "linseed")
chicks
chicks <- read.csv("chicks.csv")
View(chicks)
# subset of the DataSet without the NA values.
chicks <- chicks[!is.na(chicks$weight), ]
chicks
# creating a subset of chicks who were feed linseed.
linseed_chicks <- subset(chicks, feed = "linseed")
# creating a subset of chicks who were feed linseed.
linseed_chicks <- subset(chicks, feed == "linseed")
linseed_chicks
View(linseed_chicks)
# creating a subset of chicks who were feed linseed.
soybean_chicks <- subset(chicks, feed == "soybean")
View(soybean_chicks)
mean(soybean_chicks)
View(soybean_chicks)
mean(soybean_chicks$weight)
summary(soybean_chicks$weight)
# resetting row names after excluding NAs
rownames(chicks)
# resetting row names after excluding NAs
rownames(chicks) <- NULL
rownames(chicks)
# another way to know the number of NAs in original Data Set.
sum(is.na(chicks$weight))
chicks <- read.csv("chicks.csv")
# another way to know the number of NAs in original Data Set.
sum(is.na(chicks$weight))
\n
# Format options
formatted_options <- paste(1:6, ", ", feed_options)
# clean NAs and create a subset
chicks <- subset(chicks, !is.na(weights))
# Determine feed options
feed_options <- unique(chicks$feed)
# Format options
formatted_options <- paste(1:6, ", ", feed_options)
formatted_options
# Format options
formatted_options <- paste(1:6, ". ", feed_options)
formatted_options
# Format options
formatted_options <- paste0(1:6, ". ", feed_options)
formatted_options
# Prompt user with options
(formatted_options, sep = /n)
# Prompt user with options
(formatted_options, sep = \n)
# Prompt user with options
cat(formatted_options, sep = \n)
# Prompt user with options
(formatted_options, sep = "\n")
# Prompt user with options
cat(formatted_options, sep = "\n")
# Prompt user with options
cat(formatted_options, sep = "\n")
feed_choice <- as.integer(readline("Feed Type: "))
cat(formatted_options, sep = "\n")
feed_choice <- as.integer(readline("Feed Type: "))
chicks <- read.csv("chicks.csv")
# clean NAs and create a subset
chicks <- subset(chicks, !is.na(weights))
# Determine feed options
feed_options <- unique(chicks$feed)
# Format options
formatted_options <- paste0(1:lenght(feed_options), ". ", feed_options)
# Prompt user with options
cat(formatted_options, sep = "\n")
feed_choice <- as.integer(readline("Feed Type: "))
# Print selected option
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
feed_choice <- as.integer(readline("Feed Type: "))
# Print selected option
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
# Handel invalid input
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
}
# Handel invalid input
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
}
# Print selected option
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
# Prompt user with options
cat(formatted_options, sep = "\n")
feed_choice <- as.integer(readline("Feed Type: "))
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
}
feed_choice <- as.integer(readline("Feed Type: "))
# Handel invalid input
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
}
feed_choice <- as.integer(readline("Feed Type: "))
# Handel invalid input
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
} else{
# Print selected option
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
}
feed_choice <- as.integer(readline("Feed Type: "))
# Handel invalid input
if (feed_choice < 1 || feed_choice > 6){
cat("Invalid Choice")
} else{
# Print selected option
selected_feed <- feed_options[feed_choice]
print(subset(chicks, feed == selected_feed))
}
file.create("sales.R")
Q1 <- read.csv("Q1.csv")
Q1 <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/src2/sales/Q1.csv")
Q2 <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/src2/sales/Q2.csv")
Q3 <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/src2/sales/Q3.csv")
Q4 <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Transforming_Data_L2/src2/sales/Q4.csv")
view(Q1)
View(Q1)
# Row Bind
rbind()
# Row Bind
sales <- rbind(Q1,Q2,Q3,Q4)
sales
View(Q1)
View(Q2)
View(Q2)
View(Q3)
View(Q4)
View(sales)
Q1$quater <- "Q1"
Q2$quater <- "Q2"
sales <- rbind(Q1,Q2,Q3,Q4)
Q4$quater <- "Q4"
Q3$quater <- "Q3"
sales <- rbind(Q1,Q2,Q3,Q4)
sales
sales <- rbind(Q1,Q2,Q3,Q4)
sales
View(sales)
# adding a column "Value"
# "ifelse" as a function
ifelse(sales$sale_amount > 100) #"High Value", "Regular")
# adding a column "Value"
# "ifelse" as a function
ifelse(sales$sale_amount > 100, "High Value", "Regular")
# adding a column "Value"
# "ifelse" as a function
sales$value <- ifelse(sales$sale_amount > 100, "High Value", "Regular")
View(sales)
dir.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions")
dir.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3")
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/count.R")
Mario <- as.integer(readline("Enter votes for Mario: "))
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/count.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/count.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/count.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/count.R", echo=TRUE)
q <- 3
while (q != 0){
cat("Quack\n")
q <- q - 1
}
for(e in c(1:10)) {
cat
}
for(e in 1:10) {
cat
}
for(e in 1:10) {
cat("Quack\n")
}
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R")
votes <- read.csv("votes.csv")
votes <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/votes.csv")
View(votes)
votes["Mario", ]
for (candidates in rowname(votes)){
votes[candidates, ]
}
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
votes <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/votes.csv")
View(votes)
total_votes <- c() # create a vector
for (candidates in rowname(votes)){ # for loop to traverse through each row of the data set.
total_votes[candidate] <- sum(votes[candidates, ]) # storing the total votes for a candidate along with the candidate name.
}
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
votes <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/votes.csv")
total_votes <- c() # create a vector
for (candidates in rowname(votes)){ # for loop to traverse through each row of the data set.
total_votes[candidate] <- sum(votes[candidates, ]) # storing the total votes for a candidate along with the candidate name.
}
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
votes <- read.csv("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/votes.csv")
total_votes <- c() # create a vector
for (candidates in rownames(votes)){ # for loop to traverse through each row of the data set.
total_votes[candidate] <- sum(votes[candidates, ]) # storing the total votes for a candidate along with the candidate name.
}
total_votes <- c() # create a vector
for (candidates in rownames(votes)){ # for loop to traverse through each row of the data set.
total_votes[candidates] <- sum(votes[candidates, ]) # storing the total votes for a candidate along with the candidate name.
}
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R", echo=TRUE)
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R")
total_votes
source("~/Documents/GitHub/Statistical_R/Lectures/Applying_Functions_L3/tabulate.R")
apply(votes, MARGIN = 1, FUN = sum)
apply(votes, MARGIN = 2, FUn = sum)
apply(votes, MARGIN = 2, FUN = sum)
sort(total_votes)
sort(total_votes, decreasing = TRUE)
dir.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4")
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Tidying_Data_L4")
